version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15
    container_name: sca-postgres-db-prod
    environment:
      POSTGRES_DB: sca_ide
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sca-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: sca-redis-cache-prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sca-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SonarQube для анализа кода
  sonarqube:
    image: sonarqube:community
    container_name: sca-sonarqube-analysis-prod
    environment:
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
      SONAR_WEB_JAVAOPTS: "-Xmx2g -Xms1g"
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - sca-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Backend приложение
  backend:
    build: 
      context: ./sca-backend
      dockerfile: Dockerfile
    image: sca-backend:prod
    container_name: sca-backend-api-prod
    environment:
      SPRING_PROFILES_ACTIVE: production
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD:-12345678}
      DB_HOST: postgres
      SPRING_REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DOCKER_HOST: tcp://host.docker.internal:2375
      JWT_SECRET: ${JWT_SECRET}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      sonarqube:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - workspace_data:/app/workspaces
      - ./user-data/projects:/tmp/sca-workspaces
    networks:
      - sca-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend приложение
  frontend:
    build: 
      context: ./sca-frontend
      dockerfile: Dockerfile
    image: sca-frontend:prod
    container_name: sca-frontend-app-prod
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL}
      - REACT_APP_ENV=development
      - REACT_APP_GITHUB_TOKEN=${REACT_APP_GITHUB_TOKEN}
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=100
      - WATCHPACK_POLLING=true
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./sca-frontend/src:/app/src
      - ./sca-frontend/public:/app/public
      - /app/node_modules
    networks:
      - sca-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://0.0.0.0:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx для проксирования
  nginx:
    image: nginx:alpine
    container_name: sca-nginx-proxy-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./sca-backend/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./sca-backend/ssl:/etc/nginx/ssl:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - sca-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4
    container_name: sca-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - sca-network
    restart: unless-stopped
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_logs:
    driver: local
  workspace_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  sca-network:
    driver: bridge 